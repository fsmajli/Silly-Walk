addpath('ExampleData', 'TestData', 'TrainingData')

trainingDataDir = dir('TrainingData');
trainingFileNames = {trainingDataDir.name};
trainingFileNames = trainingFileNames(3:end);

testDataDir = dir('TestData');
testFileNames = {testDataDir.name};
testFileNames = testFileNames(3:end);

[XTrain, YTrain, XTest, YTest] = load_dataset(trainingFileNames, testFileNames);
model = trainSillyWalkClassifier(XTrain, YTrain);
NNET_CNN= findall(groot, 'Type', 'Figure');
saveas(NNET_CNN(end),strcat('training_process_resnet50_',num2str(randi(25,1,1)),'.jpg'));
%YPred = classifyWalk(model, XTest);
%accuracy = sum(YPred == YTest)/numel(YTest)*100


function YPred = classifyWalk(model, XTest)
% This is a trivial example for a classifier. It classifies any input as a
% normal walk.
YPred = classify(model, XTest);
%YPred = categorical(repmat({'Normal walk'}, size(XTest)));

end

function model = trainSillyWalkClassifier(XTrain, YTrain)
% For this trivial example, no model is required. 
[layers, options] = specify_network();
model = trainNetwork(XTrain, YTrain, layers, options);


save(fullfile(fileparts(mfilename('fullpath')), 'Model.mat'), 'model'); % do not change this line
end

function [layers, options] = specify_network()
% Your code here
inputSize = 3;
numHiddenUnits = 15;
numClasses = 2;

layers = [...
    sequenceInputLayer(inputSize)
    %%lstmLayer(numHiddenUnits,'OutputMode', 'last')
    %%bilstmLayer(numHiddenUnits,'OutputMode', 'last')
    gruLayer(numHiddenUnits,'OutputMode', 'last')
    dropoutLayer(0.5)
    reluLayer
    fullyConnectedLayer(numClasses)
    softmaxLayer
    classificationLayer];


maxEpochs = 100;
miniBatchSize = 8;

options = trainingOptions('adam', ...
    'MaxEpochs', maxEpochs, ...
    'MiniBatchSize', miniBatchSize, ...
    'Verbose', false, ...
    'Plots','training-progress',...
    'shuffle','every-epoch',...
    'LearnRateSchedule','piecewise',...
    'LearnRateDropFactor',0.9,...
    'LearnRateDropPeriod',5),...
    'OutputFcn',@(info)savetrainingplot(info));
end